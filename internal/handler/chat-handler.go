package handler

import (
	"aika/internal/keyboard"
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"go.uber.org/zap"
)

func (h *Handler) InlineHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}

	data := update.CallbackQuery.Data
	fmt.Println(data)
	if !strings.HasPrefix(data, "select_") {
		return
	}

	idStr := strings.TrimPrefix(data, "select_")
	selectedId, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		h.logger.Error("parse selected id", zap.String("data", data), zap.Error(err))
		return
	}

	fmt.Println("id: ", selectedId)

	ok, err := h.redisClient.CheckPartnerToEmpty(ctx, selectedId)
	if err != nil {
		h.logger.Error("error in check partner", zap.Error(err))
		return
	}
	if ok {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.CallbackQuery.From.ID,
			Text:   fmt.Sprintf("“ö–æ–ª–¥–∞–Ω—É—à—ã “õ–∞–∑—ñ—Ä –±–æ—Å –µ–º–µ—Å, –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑: %d", selectedId),
		})
		return
	}

	if err := h.redisClient.SetPartner(ctx, update.CallbackQuery.From.ID, selectedId); err != nil {
		h.logger.Error("error in set partner", zap.Error(err))
		return
	}

	if err := h.redisClient.SetPartner(ctx, selectedId, update.CallbackQuery.From.ID); err != nil {
		h.logger.Error("error in set partner", zap.Error(err))
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.CallbackQuery.From.ID,
		Text:   fmt.Sprintf("–°—ñ–∑ —Å“±—Ö–±–∞—Ç—Ç–∞—Å—É—à—ã“ì–∞ ID –∞—Ä“õ—ã–ª—ã “õ–æ—Å—ã–ª–¥—ã“£—ã–∑: %d\n–ë“±–ª —á–∞—Ç—Ç–∞(–±–æ—Ç—Ç—ã“£ —ñ—à—ñ–Ω–¥–µ) –±–∞—Ä–ª—ã“õ —Ç–∏–ø—Ç–µ–≥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä(üì∑ –§–æ—Ç–æ, üé• –í–∏–¥–µ–æ, üîä –ê—É–¥–∏–æ, üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è, üìÑ “ö“±–∂–∞—Ç, ‚ùì –°“±—Ä–∞“õ—Ç–∞—Ä) –∂—ñ–±–µ—Ä—É–≥–µ –±–æ–ª–∞–¥—ã! –ñ–∞–π “ì–∞–Ω–∞ —Å”ô–ª–µ–º –Ω–µ–º–µ—Å–µ —Ñ–æ—Ç–æ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—Å–µ“£—ñ–∑ –±–æ–ª–∞–¥—ã üòâ", selectedId),
	})
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: selectedId,
		Text:   fmt.Sprintf("–°—ñ–∑ —Å“±—Ö–±–∞—Ç—Ç–∞—Å—É—à—ã“ì–∞ ID –∞—Ä“õ—ã–ª—ã “õ–æ—Å—ã–ª–¥—ã“£—ã–∑: %d\n–ë“±–ª —á–∞—Ç—Ç–∞(–±–æ—Ç—Ç—ã“£ —ñ—à—ñ–Ω–¥–µ) –±–∞—Ä–ª—ã“õ —Ç–∏–ø—Ç–µ–≥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä(üì∑ –§–æ—Ç–æ, üé• –í–∏–¥–µ–æ, üîä –ê—É–¥–∏–æ, üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è, üìÑ “ö“±–∂–∞—Ç, ‚ùì –°“±—Ä–∞“õ—Ç–∞—Ä) –∂—ñ–±–µ—Ä—É–≥–µ –±–æ–ª–∞–¥—ã! –ñ–∞–π “ì–∞–Ω–∞ —Å”ô–ª–µ–º –Ω–µ–º–µ—Å–µ —Ñ–æ—Ç–æ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—Å–µ“£—ñ–∑ –±–æ–ª–∞–¥—ã üòâ", update.CallbackQuery.From.ID),
	})
}

// CallbackHandlerExit –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞.
func (h *Handler) CallbackHandlerExit(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.CallbackQuery.From.ID
	partnerID, err := h.redisClient.GetUserPartner(ctx, userID)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", err)
		return
	}

	if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		return
	}

	if partnerID != 0 {
		if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", err)
			return
		}
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: partnerID,
			Text:   "–°—ñ–∑–¥—ñ“£ –ø–∞—Ä—Ç–Ω–µ—Ä-(-—à–∞) —á–∞—Ç—Ç–∞–Ω —à—ã“õ—Ç—ã.",
		})
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      userID,
		Text:        "–°—ñ–∑ —á–∞—Ç—Ç–∞–Ω —à—ã“õ—Ç—ã“£—ã–∑",
		ReplyMarkup: nil,
	})
}

func (h *Handler) HandleChat(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID
	partnerID, err := h.redisClient.GetUserPartner(ctx, userID)
	if err != nil {
		h.logger.Error("error get user partner", zap.Error(err))
	}
    

	if partnerID == 0 {
		kb := keyboard.NewKeyboard()
	    kb.AddRow(keyboard.NewWebAppButton("üöÄ AIKA Mini App", h.cfg.MiniAppURL))

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      update.Message.Chat.ID,
			Text:        "–ß–∞—Ç“õ–∞ “õ–æ—Å—ã–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ üöÄ AIKA Mini App –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
			ReplyMarkup: kb.Build(),
		})
	return
	}

	senderNickname, err := h.userRepo.GetUserNickname(userID)
	if err != nil && senderNickname == "" {
		senderNickname = update.Message.From.Username
	}

	partnerIdentifier := fmt.Sprintf("%d", partnerID)
	kb := keyboard.NewKeyboard()
	kb.AddRow(keyboard.NewInlineButton("üîï –®—ã“ì—É", "exit"))

	switch {
	case update.Message.Text != "":
		fmt.Printf("TEXT | User=%s | Text=%q\n", senderNickname, update.Message.Text)

		partnerMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         partnerID,
			Text:           fmt.Sprintf("–æ—Ç %s: %s", senderNickname, update.Message.Text),
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
		}

		senderMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         update.Message.Chat.ID,
			Text:           "–ï–≥–µ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©—à—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ, —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.",
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}

		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.From.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –•–∞–±–∞—Ä–ª–∞–º—ã–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))

		_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Text:        "–ï–≥–µ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©—à—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ, —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.",
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}

		textToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s:\n%s", senderNickname, partnerIdentifier, update.Message.Text)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         h.cfg.ChannelName,
			Text:           textToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
	// 2. –§–æ—Ç–æ.
	case update.Message.Photo != nil:
		fmt.Printf("PHOTO | User=%s | FileID=%s | Caption=%q\n", senderNickname, update.Message.Photo[len(update.Message.Photo)-1].FileID, update.Message.Caption)
		photoID := update.Message.Photo[len(update.Message.Photo)-1].FileID

		var partnerPhotoCaption string
		if update.Message.Caption == "" {
			partnerPhotoCaption = fmt.Sprintf("–æ—Ç %s: —Ñ–æ—Ç–æ", senderNickname)
		} else {
			partnerPhotoCaption = fmt.Sprintf("–æ—Ç %s: %s", senderNickname, update.Message.Caption)
		}

		partnerMsg, err := b.SendPhoto(ctx, &bot.SendPhotoParams{
			ChatID:         partnerID,
			Photo:          &models.InputFileString{Data: photoID},
			Caption:        partnerPhotoCaption,
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}

		senderMsg, err := b.SendPhoto(ctx, &bot.SendPhotoParams{
			ChatID:         update.Message.Chat.ID,
			Photo:          &models.InputFileString{Data: photoID},
			Caption:        "–ï–≥–µ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©—à—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ, —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.",
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}

		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –§–æ—Ç–æ–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))

		_, err = b.EditMessageCaption(ctx, &bot.EditMessageCaptionParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Caption:     "–ï–≥–µ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©—à—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ, —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.",
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}

		var photoCaptionChannel string
		if update.Message.Caption == "" {
			photoCaptionChannel = "—Ñ–æ—Ç–æ"
		} else {
			photoCaptionChannel = update.Message.Caption
		}
		captionToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s:\n%s", senderNickname, partnerIdentifier, photoCaptionChannel)
		_, err = b.SendPhoto(ctx, &bot.SendPhotoParams{
			ChatID:         h.cfg.ChannelName,
			Photo:          &models.InputFileString{Data: photoID},
			Caption:        captionToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ:", err)
		}

	// 3. –í–∏–¥–µ–æ.
	case update.Message.Video != nil:
		fmt.Printf("VIDEO | User=%s | FileID=%s | Caption=%q\n", senderNickname, update.Message.Video.FileID, update.Message.Caption)
		var partnerVideoCaption string
		if update.Message.Caption == "" {
			partnerVideoCaption = fmt.Sprintf("–æ—Ç %s: –≤–∏–¥–µ–æ", senderNickname)
		} else {
			partnerVideoCaption = fmt.Sprintf("–æ—Ç %s: %s", senderNickname, update.Message.Caption)
		}
		partnerMsg, err := b.SendVideo(ctx, &bot.SendVideoParams{
			ChatID:         partnerID,
			Video:          &models.InputFileString{Data: update.Message.Video.FileID},
			Caption:        partnerVideoCaption,
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendVideo(ctx, &bot.SendVideoParams{
			ChatID:         update.Message.Chat.ID,
			Video:          &models.InputFileString{Data: update.Message.Video.FileID},
			Caption:        partnerVideoCaption,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –í–∏–¥–µ–æ–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageCaption(ctx, &bot.EditMessageCaptionParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Caption:     partnerVideoCaption,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		captionToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s:\n%s", senderNickname, partnerIdentifier, partnerVideoCaption)
		_, err = b.SendVideo(ctx, &bot.SendVideoParams{
			ChatID:         h.cfg.ChannelName,
			Video:          &models.InputFileString{Data: update.Message.Video.FileID},
			Caption:        captionToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ:", err)
		}

	// 4. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	case update.Message.Voice != nil:
		fmt.Printf("VOICE | User=%s | FileID=%s | Caption=%q\n", senderNickname, update.Message.Voice.FileID, update.Message.Caption)
		var partnerVoiceCaption string
		if update.Message.Caption == "" {
			partnerVoiceCaption = fmt.Sprintf("–æ—Ç %s: –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", senderNickname)
		} else {
			partnerVoiceCaption = fmt.Sprintf("–æ—Ç %s: %s", senderNickname, update.Message.Caption)
		}
		partnerMsg, err := b.SendVoice(ctx, &bot.SendVoiceParams{
			ChatID:         partnerID,
			Voice:          &models.InputFileString{Data: update.Message.Voice.FileID},
			Caption:        partnerVoiceCaption,
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendVoice(ctx, &bot.SendVoiceParams{
			ChatID:         update.Message.Chat.ID,
			Voice:          &models.InputFileString{Data: update.Message.Voice.FileID},
			Caption:        partnerVoiceCaption,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –î—ã–±—ã—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageCaption(ctx, &bot.EditMessageCaptionParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Caption:     partnerVoiceCaption,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		captionToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: %s –∫ %s:\n%s", senderNickname, partnerIdentifier, partnerVoiceCaption)
		_, err = b.SendVoice(ctx, &bot.SendVoiceParams{
			ChatID:         h.cfg.ChannelName,
			Voice:          &models.InputFileString{Data: update.Message.Voice.FileID},
			Caption:        captionToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}

	// 5. –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ (VideoNote).
	case update.Message.VideoNote != nil:
		fmt.Printf("VIDEO_NOTE | User=%s | FileID=%s\n", senderNickname, update.Message.VideoNote.FileID)
		// –î–ª—è VideoNote –ø–æ–ª—è Caption –∏ ParseMode –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äì –∏—Ö –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º.
		partnerMsg, err := b.SendVideoNote(ctx, &bot.SendVideoNoteParams{
			ChatID:         partnerID,
			VideoNote:      &models.InputFileString{Data: update.Message.VideoNote.FileID},
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendVideoNote(ctx, &bot.SendVideoNoteParams{
			ChatID:         update.Message.Chat.ID,
			VideoNote:      &models.InputFileString{Data: update.Message.VideoNote.FileID},
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –í–∏–¥–µ–æ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		captionToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –∫ %s: –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", senderNickname, partnerIdentifier)
		_, err = b.SendVideoNote(ctx, &bot.SendVideoNoteParams{
			ChatID:         h.cfg.ChannelName,
			VideoNote:      &models.InputFileString{Data: update.Message.VideoNote.FileID},
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         h.cfg.ChannelName,
			Text:           captionToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}

	// 6. –î–æ–∫—É–º–µ–Ω—Ç.
	case update.Message.Document != nil:
		fmt.Printf("DOCUMENT | User=%s | FileID=%s | Caption=%q\n", senderNickname, update.Message.Document.FileID, update.Message.Caption)
		var partnerDocCaption string
		if update.Message.Caption == "" {
			partnerDocCaption = fmt.Sprintf("–æ—Ç %s: –¥–æ–∫—É–º–µ–Ω—Ç", senderNickname)
		} else {
			partnerDocCaption = fmt.Sprintf("–æ—Ç %s: %s", senderNickname, update.Message.Caption)
		}
		partnerMsg, err := b.SendDocument(ctx, &bot.SendDocumentParams{
			ChatID:         partnerID,
			Document:       &models.InputFileString{Data: update.Message.Document.FileID},
			Caption:        partnerDocCaption,
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendDocument(ctx, &bot.SendDocumentParams{
			ChatID:         update.Message.Chat.ID,
			Document:       &models.InputFileString{Data: update.Message.Document.FileID},
			Caption:        partnerDocCaption,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è “ö“±–∂–∞—Ç—Ç—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageCaption(ctx, &bot.EditMessageCaptionParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Caption:     partnerDocCaption,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		captionToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s:\n%s", senderNickname, partnerIdentifier, partnerDocCaption)
		_, err = b.SendDocument(ctx, &bot.SendDocumentParams{
			ChatID:         h.cfg.ChannelName,
			Document:       &models.InputFileString{Data: update.Message.Document.FileID},
			Caption:        captionToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", err)
		}

	// 7. –ê—É–¥–∏–æ.
	case update.Message.Audio != nil:
		fmt.Printf("AUDIO | User=%s | FileID=%s | Caption=%q\n", senderNickname, update.Message.Audio.FileID, update.Message.Caption)
		var partnerAudioCaption string
		if update.Message.Caption == "" {
			partnerAudioCaption = fmt.Sprintf("–æ—Ç %s: –∞—É–¥–∏–æ", senderNickname)
		} else {
			partnerAudioCaption = fmt.Sprintf("–æ—Ç %s: %s", senderNickname, update.Message.Caption)
		}
		partnerMsg, err := b.SendAudio(ctx, &bot.SendAudioParams{
			ChatID:         partnerID,
			Audio:          &models.InputFileString{Data: update.Message.Audio.FileID},
			Caption:        partnerAudioCaption,
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendAudio(ctx, &bot.SendAudioParams{
			ChatID:         update.Message.Chat.ID,
			Audio:          &models.InputFileString{Data: update.Message.Audio.FileID},
			Caption:        partnerAudioCaption,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –ê—É–¥–∏–æ–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageCaption(ctx, &bot.EditMessageCaptionParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Caption:     partnerAudioCaption,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		captionToChannel := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –∫ %s:\n%s", senderNickname, partnerIdentifier, partnerAudioCaption)
		_, err = b.SendAudio(ctx, &bot.SendAudioParams{
			ChatID:         h.cfg.ChannelName,
			Audio:          &models.InputFileString{Data: update.Message.Audio.FileID},
			Caption:        captionToChannel,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞—É–¥–∏–æ:", err)
		}

	// 8. –õ–æ–∫–∞—Ü–∏—è.
	case update.Message.Location != nil:
		fmt.Printf("LOCATION | User=%s | Lat=%.5f | Long=%.5f\n", senderNickname, update.Message.Location.Latitude, update.Message.Location.Longitude)
		partnerMsg, err := b.SendLocation(ctx, &bot.SendLocationParams{
			ChatID:         partnerID,
			Latitude:       update.Message.Location.Latitude,
			Longitude:      update.Message.Location.Longitude,
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendLocation(ctx, &bot.SendLocationParams{
			ChatID:         update.Message.Chat.ID,
			Latitude:       update.Message.Location.Latitude,
			Longitude:      update.Message.Location.Longitude,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –ì–µ–æ-–ª–æ–∫–∞—Ü–∏—è–Ω—ã –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		locationText := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s:\n–õ–æ–∫–∞—Ü–∏—è: %.5f, %.5f", senderNickname, partnerIdentifier, update.Message.Location.Latitude, update.Message.Location.Longitude)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         h.cfg.ChannelName,
			Text:           locationText,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ª–æ–∫–∞—Ü–∏–∏:", err)
		}

	// 9. –°—Ç–∏–∫–µ—Ä.
	case update.Message.Sticker != nil:
		fmt.Printf("STICKER | User=%s | FileID=%s\n", senderNickname, update.Message.Sticker.FileID)
		partnerMsg, err := b.SendSticker(ctx, &bot.SendStickerParams{
			ChatID:         partnerID,
			Sticker:        &models.InputFileString{Data: update.Message.Sticker.FileID},
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendSticker(ctx, &bot.SendStickerParams{
			ChatID:         update.Message.Chat.ID,
			Sticker:        &models.InputFileString{Data: update.Message.Sticker.FileID},
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –°—Ç–∏–∫–µ—Ä–¥—ñ –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		_, err = b.SendSticker(ctx, &bot.SendStickerParams{
			ChatID:         h.cfg.ChannelName,
			Sticker:        &models.InputFileString{Data: update.Message.Sticker.FileID},
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞:", err)
		}
		stickerInfo := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s: –°—Ç–∏–∫–µ—Ä", senderNickname, partnerIdentifier)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         h.cfg.ChannelName,
			Text:           stickerInfo,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:", err)
		}

	// 10. –ö–æ–Ω—Ç–∞–∫—Ç.
	case update.Message.Contact != nil:
		contact := update.Message.Contact
		contactText := fmt.Sprintf("–æ—Ç %s: –∫–æ–Ω—Ç–∞–∫—Ç\n–¢–µ–ª: %s\n–ò–º—è: %s %s", senderNickname, contact.PhoneNumber, contact.FirstName, contact.LastName)
		partnerMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         partnerID,
			Text:           contactText,
			ParseMode:      "HTML",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         update.Message.Chat.ID,
			Text:           contactText,
			ParseMode:      "HTML",
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ñ–Ω—ñ –∂–æ—é!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			Text:        contactText,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		channelContactText := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –∫ %s:\n–ö–æ–Ω—Ç–∞–∫—Ç:\n–¢–µ–ª: %s\n–ò–º—è: %s %s", senderNickname, partnerIdentifier, contact.PhoneNumber, contact.FirstName, contact.LastName)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         h.cfg.ChannelName,
			Text:           channelContactText,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", err)
		}

	// 11. –û–ø—Ä–æ—Å.
	case update.Message.Poll != nil:
		poll := update.Message.Poll
		var partnerPollQuestion string
		if poll.Question == "" {
			partnerPollQuestion = fmt.Sprintf("–æ—Ç %s: –æ–ø—Ä–æ—Å", senderNickname)
		} else {
			partnerPollQuestion = fmt.Sprintf("–æ—Ç %s: %s", senderNickname, poll.Question)
		}
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º poll.Options (—Ç–∏–ø []models.PollOption) –≤ []models.InputPollOption
		var inputOptions []models.InputPollOption
		for _, opt := range poll.Options {
			inputOptions = append(inputOptions, models.InputPollOption{Text: opt.Text})
		}
		partnerMsg, err := b.SendPoll(ctx, &bot.SendPollParams{
			ChatID:         partnerID,
			Question:       partnerPollQuestion,
			Options:        inputOptions,
			ProtectContent: true,
		})
		if err != nil {
			if err.Error() == "forbidden, Forbidden: bot was blocked by the user" {
				if err := h.redisClient.RemoveUser(ctx, userID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				if err := h.redisClient.RemoveUser(ctx, partnerID); err != nil {
					h.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
					return
				}
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: userID,
					Text:   "“ö–æ–ª–¥–∞–Ω—É—à—ã –±–æ—Ç—Ç—ã –±“±“ì–∞—Ç—Ç–∞–¥—ã, —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –±–∞—Å“õ–∞ “õ–æ–ª–¥—É–Ω—à—ã–ª–∞—Ä–º–µ–Ω —Å”©–π–ª–µ—Å—ñ“£—ñ–∑!",
				})
			}
			h.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", zap.Error(err))
			return
		}
		senderMsg, err := b.SendPoll(ctx, &bot.SendPollParams{
			ChatID:         update.Message.Chat.ID,
			Question:       poll.Question,
			Options:        inputOptions,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é:", err)
			return
		}
		callbackData := fmt.Sprintf("delete_%d_%d_%d_%d", update.Message.Chat.ID, senderMsg.ID, partnerID, partnerMsg.ID)
		deleteKb := keyboard.NewKeyboard()
		deleteKb.AddRow(keyboard.NewInlineButton("‚õîÔ∏è –•–∞–±–∞—Ä–ª–∞–º—ã–Ω—ã –∂–æ—é –æ–ø—Ä–æ—Å!", callbackData))
		deleteKb.AddRow(keyboard.NewInlineButton("üîï –ß–∞—Ç—Ç—ã –∞—è“õ—Ç–∞—É", "exit"))
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.Message.Chat.ID,
			MessageID:   senderMsg.ID,
			ReplyMarkup: deleteKb.Build(),
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		pollText := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: –∫ %s: –û–ø—Ä–æ—Å\n–í–æ–ø—Ä–æ—Å: %s", senderNickname, partnerIdentifier, poll.Question)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         h.cfg.ChannelName,
			Text:           pollText,
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ–ø—Ä–æ—Å–∞:", err)
		}

	// 12. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
	default:
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         update.Message.Chat.ID,
			Text:           "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ:", err)
		}
	}
}

func (h *Handler) DeleteMessageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	var senderChatID int64
	var senderMsgID int
	var partnerChatID int64
	var partnerMsgID int

	_, err := fmt.Sscanf(update.CallbackQuery.Data, "delete_%d_%d_%d_%d", &senderChatID, &senderMsgID, &partnerChatID, &partnerMsgID)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback:", err)
		return
	}

	okSend, errSender := b.DeleteMessage(ctx, &bot.DeleteMessageParams{
		ChatID:    senderChatID,
		MessageID: senderMsgID,
	})
	if errSender != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", errSender)
	}

	okPartner, errPartner := b.DeleteMessage(ctx, &bot.DeleteMessageParams{
		ChatID:    partnerChatID,
		MessageID: partnerMsgID,
	})
	if errPartner != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", errPartner)
	}

	responseChatId := update.CallbackQuery.From.ID
	if !okSend || !okPartner {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: responseChatId,
			Text:   "–•–∞–±–∞—Ä–ª–∞–º–∞ ”©—à—ñ—Ä—ñ–ª–º–µ–¥—ñ!",
		})
		return
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: responseChatId,
		Text:   "–•–∞–±–∞—Ä–ª–∞–º–∞ —Å”ô—Ç—Ç—ñ ”©—à—ñ—Ä—ñ–ª–¥—ñ!",
	})
}
